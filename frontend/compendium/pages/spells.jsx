import React, { useEffect, useState } from 'react'
import Head from 'next/head'
import classNames from 'classnames'
import * as Icons from 'react-icons/gi'
import Spell from '@fabulasegoblins/ui/spell'
import { TbCards } from "react-icons/tb";
import { useRouter } from 'next/router'
import Layout from 'src/layouts/layout'
import { AiOutlineFilter, AiFillFilter } from "react-icons/ai";
import { IoTrashOutline } from "react-icons/io5";

const Cart = ({ isOpen, onClose, children, onSubmit, total }) => {
  return (
    <div
      className={`fixed top-0 right-0 h-full bg-slate-900 bg-opacity-95 text-white w-full sm:w-96 transform transition-transform duration-300 ${
        isOpen ? 'translate-x-0' : 'translate-x-full'
      }`}
    >
      <button
        className="absolute top-2 right-8 text-4xl text-white hover:text-gray-400"
        onClick={onClose}
      >
        &times;
      </button>
      <h2 className="px-6 py-4 pb-0 text-2xl font-bold mb-4">Suas Magias ({total})</h2>
      <div className="p-4 pt-0 overflow-y-auto h-[calc(100%-150px)]">
        {children}
      </div>
      <div className='text-center mx-4 fixed bottom-5 w-[calc(100%-35px)] sm:w-[350px]'>
        <button
          onClick={onSubmit}
          className='text-lg block w-full text-black bg-emerald-200 px-2 py-1 rounded-xl'
        >
          Criar cartão de poderes
        </button>
      </div>
    </div>
  );
};

export default function Index({ apiHostUrl }) {
  const title = 'Poderes'
  const [spells, setSpells] = useState([])
  const [currentPage, setCurrentPage] = useState(1)
  const [totalPages, setTotalPages] = useState(1)
  const [cartSpells, setCartSpells] = useState(null)
  const [selectedSpell, setSelectedSpell] = useState(null)
  const [cartOpen, setCartOpen] = useState(false)
  const [selectedGrimo, setSelectedGrimo] = useState(null)
  const [selectedCulture, setSelectedCulture] = useState(null)
  const [selectedSpecie, setSelectedSpecie] = useState(null)
  const [selectedCharacterRole, setSelectedCharacterRole] = useState(null)
  const [filterOpen, setFilterOpen] = useState(false)

  const router = useRouter()

  useEffect(() => {
    if(selectedSpell || cartOpen) {
      console.log("Add class")
      document.body.classList.add('no-scroll');
    }

    if (!selectedSpell && !cartOpen) {
      console.log("Remove class")
      document.body.classList.remove('no-scroll');
    }

    if (selectedSpell) {
      window.history.pushState(null, '', `/spells/${selectedSpell.permalink}`);
    } else {
      window.history.pushState(null, '', '/spells');
    }
  }, [selectedSpell, cartOpen])

  useEffect(() => {
    async function loadSpells(page) {
      const permalinks = [selectedGrimo, selectedCulture, selectedSpecie, selectedCharacterRole].filter(element => element !== null)
      const queryParams = new URLSearchParams();
      queryParams.append('q[filter_tags_eq_any]', `${permalinks.join(',')}`);

      const result = await fetch(`${apiHostUrl}/api/spells?page=${page}&${queryParams.toString()}`)
      const response = await result.json()
      setSpells(response)
      setTotalPages(response.totalPages)

      const totalPages = result.headers.get('X-Pages') || ''
      setTotalPages(parseInt(totalPages, 10))
    }

    loadSpells(currentPage)
  }, [currentPage, selectedGrimo, selectedCharacterRole, selectedCulture, selectedSpecie])

  const handlePrevPage = () => {
    if (currentPage > 1) {
      setCurrentPage(currentPage - 1)
    }
  }

  const handleNextPage = () => {
    if (currentPage < totalPages) {
      setCurrentPage(currentPage + 1)
    }
  }

  const handleSpellSelect = (e, spell) => {
    e.preventDefault()
    e.stopPropagation()
    setSelectedSpell(spell)
    setCartOpen(false)
    // router.push(`/spells/${spell.permalink}`, undefined, { shallow: true })
  };

  const handleCloseSpell = (e) => {
    e.preventDefault()
    setSelectedSpell(null)
    // router.push('/spells', undefined, { shallow: true })
  };

  const submitSpells = () => {
    const baseUrl = '/spells/print';
    const ids = cartSpells.map(spell => spell.id); // Example array of IDs

    const queryParams = new URLSearchParams();
    ids.forEach(id => queryParams.append('q[id_in][]', id));
    const url = `${baseUrl}?${queryParams.toString()}`;
    window.open(url);
  }

  return (
    <Layout>
      <Head>
        <title>{title}</title>
        <meta name="description" content="Generated by create next app" />
      </Head>
      <div>
        {cartSpells && (
          <Cart onSubmit={submitSpells} isOpen={cartOpen} onClose={e => setCartOpen(false)} total={cartSpells.length}>
            {cartSpells.map(spell => {
              const Icon = Icons[spell.icon]

              return (
                <button
                  onClick={e => setSelectedSpell(spell)}
                  key={spell.id}
                  className={classNames('relative w-full p-4 text-left my-2 rounded-md border', {
                    'bg-gradient-to-r from-purple-700 to-green-700': spell.ultimate,
                    'bg-gradient-to-r from-yellow-600 to-red-900': spell.sacrifice,
                    'bg-black-200 text-white border-gray-400 border': !spell.ultimate && !spell.sacrifice
                  })}
                >
                  <span className='inline-block mr-2 text-5xl align-middle'>
                    <Icon />
                  </span>
                  {spell.title}
                  <button
                    className='absolute right-2 top-3 text-2xl align-top'
                    onClick={e => {
                      e.preventDefault();
                      e.stopPropagation();
                      setCartSpells(cartSpells.filter(cspell => cspell.permalink != spell.permalink))
                    }}
                  >
                    <IoTrashOutline />
                  </button>
                </button>
              )
            })}
          </Cart>
        )}
      </div>
      <div className="mx-3 md:mx-6 mt-4">
        <h1 className="text-4xl font-bold font-serif pt-10 px-4 flex justify-between gap-3">
          <span>
            {title}
          </span>
          {!cartSpells && (
            <div className='flex gap-3'>
              <button
                onClick={e => setFilterOpen(!filterOpen)}
                className='text-lg text-black bg-emerald-200 px-2 py-1 rounded-xl'
              >
                {filterOpen ? <AiFillFilter /> : <AiOutlineFilter />}
              </button>
              <button
                onClick={e => setCartSpells([])}
                className='text-lg text-black bg-emerald-200 px-2 py-1 rounded-xl'
              >
                Novo deck de Poderes
              </button>
            </div>
          )}
          {cartSpells && (
            <div className='flex gap-3'>
              <button
                onClick={e => setFilterOpen(!filterOpen)}
                className='text-lg text-black bg-emerald-200 px-2 py-1 rounded-xl'
              >
                {filterOpen ? <AiFillFilter /> : <AiOutlineFilter />}
              </button>
              <button
                className='text-3xl border border-black rounded-xl px-2 py-1 bg-green-200 text-black'
                onClick={e => setCartOpen(true)}
              >
                <TbCards className='inline-block' /> <span className='text-2xl'>({cartSpells.length})</span>
              </button>
            </div>
          )}
        </h1>

        <div className={`fixed z-50 left-0 top-0 bg-slate-900 bg-opacity-90 h-full w-72 px-7 py-7 transform transition-transform ${
          filterOpen ? 'translate-x-0' : 'translate-x-[-18rem]'
        }`}>
          <div className='text-3xl'>
            Filtros
          </div>

          <div>
            <button
              className="absolute top-6 right-8 text-4xl text-white hover:text-gray-400"
              onClick={e => { setFilterOpen(false)}}
            >
              &times;
            </button>
          </div>

          <div className='align-middle'>
            <span className='mr-3 mt-7 block'>Grimo</span>
            <select
              value={selectedGrimo}
              onChange={e => setSelectedGrimo(e.target.value)}
              className='text-black border border-black text-md rounded-md px-2 py-1'
            >
              <option value={null}>-</option>
              <option value={'brasao-de-giurad'}>Giurad {selectedGrimo === 'giurad' && '(x)'}</option>
              <option value={'joia-de-lunn'}>Lunn</option>
              <option value={'orbe-de-allura'}>Allura</option>
              <option value={'olho-de-kanus'}>Kanus</option>
              <option value={'arca-de-ravna'}>Ravna</option>
              <option value={'totem-de-darian'}>Darian</option>
              <option value={'aparato-de-magni'}>Magni</option>
              <option value={'frasco-de-zanari'}>Zanari</option>
              <option value={'insignia-de-qatun'}>Qatun</option>
              <option value={'selo-de-ixin'}>Ixin</option>
            </select>

            {selectedGrimo && (
              <button
                onClick={e => setSelectedGrimo('')}
                className='border-blue-900 text-sm align-middle ml-2 inline-block'
              >
                ✖
              </button>
            )}
          </div>

          <div>
            <span className='mr-3 mt-7 inline-block'>Cultura</span>
            <select
              value={selectedCulture}
              onChange={e => setSelectedCulture(e.target.value)}
              className='text-black border border-black text-md rounded-md px-2 py-1'
            >
              <option value={null}>-</option>
              <option value={'filhos-do-orvalho'}>Filhos do Orvalho</option>
              <option value={'filhos-das-areias'}>Filhos das Areias</option>
              <option value={'filhos-de-caldera'}>Filhos da Caldera</option>
              <option value={'filhos-de-arcadia'}>Filhos de Arcádia</option>
              <option value={'filhos-das-ilhas'}>Filhos das Ilhas</option>
              <option value={'filhos-do-subterraneo'}>Filhos do Subterrâneo</option>
              <option value={'filhos-da-tempestade'}>Filhos da Tempestade</option>
              <option value={'filhos-do-povo-livre'}>Filhos do Povo Livre</option>
              <option value={'filhos-de-eregor'}>Filhos de Eregor</option>
              <option value={'filhos-de-timeria'}>Filhos de Timéria</option>
            </select>

            {selectedCulture && (
              <button
                onClick={e => setSelectedCulture('')}
                className='border-blue-900 text-sm align-middle ml-2 inline-block'
              >
                ✖
              </button>
            )}
          </div>

          <div>
            <span className='mr-3 mt-7 block'>Espécie</span>
            <select
              value={selectedSpecie}
              onChange={e => setSelectedSpecie(e.target.value)}
              className='text-black border border-black text-md rounded-md px-2 py-1'
            >
              <option value={null}>-</option>
              <option value={'goblin'}>Goblin {selectedGrimo === 'giurad' && '(x)'}</option>
              <option value={'armadon'}>Armadon</option>
              <option value={'metaloide'}>Metalóide</option>
              <option value={'razalan'}>Razalan</option>
              <option value={'valdari'}>Valdari</option>
              <option value={'luminin'}>Luminin</option>
            </select>

            {selectedSpecie && (
              <button
                onClick={e => setSelectedSpecie('')}
                className='border-blue-900 text-sm align-middle ml-2 inline-block'
              >
                ✖
              </button>
            )}
          </div>

          <div>
            <span className='mr-3 mt-7 block'>Papel de Jogo</span>
            <select
              value={selectedCharacterRole}
              onChange={e => setSelectedCharacterRole(e.target.value)}
              className='text-black border border-black text-md rounded-md px-2 py-1'>
              <option value={null}>-</option>
              <option value={'carrier'}>Carregador</option>
              <option value={'shooter'}>Atirador</option>
              <option value={'tank'}>Tanque</option>
              <option value={'support'}>Suporte</option>
              <option value={'caster'}>Conjurador</option>
              <option value={'utility'}>Utilitário</option>
            </select>

            {selectedCharacterRole && (
              <button
                onClick={e => setSelectedCharacterRole('')}
                className='border-blue-900 text-sm align-middle ml-2 inline-block'
              >
                ✖
              </button>
            )}
          </div>
        </div>

        {selectedSpell && (
          <div
            className="fixed inset-0 flex xs:justify-center items-start xs:items-center bg-black bg-opacity-50 overflow-x-scroll"
            onClick={e => handleCloseSpell(e)}
          >
            <div className="relative bg-slate-700 rounded-lg shadow-lg w-full xs:w-11/12 sm:w-11/12 md:w-[800px] lg:w-[800px] p-6">
              <button
                className="fixed xs:absolute right-3 top-0 text-white hover:text-gray-900 text-4xl"
                onClick={e => { handleCloseSpell(e)}}
              >
                &times;
              </button>
              <Spell spell={selectedSpell} />

              <button
                className='text-lg text-black bg-emerald-200 px-2 py-1 rounded-xl'
                onClick={e => {
                  setCartSpells([...(cartSpells || []), selectedSpell])
                  setCartOpen(true)
                  handleCloseSpell(e)
                }}
              >
                Adicionar Magia ao Deck
              </button>
            </div>
          </div>
        )}

        <div className='grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 mt-5 text-sm px-4 gap-3 md:gap-3 rounded-lg'>
          {spells.map(spell => {
            const Icon = Icons[spell.icon]

            return (
              <button
                onClick={e => {
                  handleSpellSelect(e, spell)
                }}
                key={spell.id}
                className={classNames('rounded-md border p-2', {
                  'bg-gradient-to-r from-purple-700 to-green-700': spell.ultimate,
                  'bg-gradient-to-r from-yellow-600 to-red-900': spell.sacrifice,
                  'bg-black-200 text-white border-gray-400 border': !spell.ultimate && !spell.sacrifice
                })}
              >
                <span className='inline-block mr-2 text-lg align-middle'>
                  <Icon />
                </span>
                {spell.tier && (
                  <span className={classNames(`inline-block mr-2 align-top text-xs w-4 h-4 leading-tight rounded-full text-black font-black`, {
                    'bg-green-200': spell.tier == 1,
                    'bg-blue-200': spell.tier == 2,
                    'bg-orange-200': spell.tier == 3,
                    'bg-red-200': spell.tier == 4,
                  })}>
                    {spell.tier}
                  </span>
                )}
                {spell.title}
              </button>
            )
          })}
        </div>

        <div className="flex justify-between mt-4 px-4">
          <button
            onClick={handlePrevPage}
            disabled={currentPage === 1}
            className="px-4 py-2 bg-slate-500 text-white rounded disabled:opacity-50"
          >
            Previous
          </button>
          <span>Page {currentPage} of {totalPages}</span>
          <button
            onClick={handleNextPage}
            disabled={currentPage === totalPages}
            className="px-4 py-2 bg-slate-500 text-white rounded disabled:opacity-50"
          >
            Next
          </button>
        </div>
      </div>
    </Layout>
  )
}

export async function getStaticProps() {
  let apiHostUrl;

  // Example of setting apiHostUrl, replace with your actual logic
  if (process.env.CORE_HOST_URL) {
    apiHostUrl = process.env.CORE_HOST_URL;
  }

  // Ensure apiHostUrl is not undefined
  if (apiHostUrl === undefined) {
    apiHostUrl = null;
  }

  console.log(process.env)

  return {
    props: {
      apiHostUrl: apiHostUrl
    }
  }
}
