import React, { useEffect, useState } from 'react'
import Head from 'next/head'
import classNames from 'classnames'
import * as Icons from 'react-icons/gi'
import Spell from 'src/components/spell'
import { TbCards } from "react-icons/tb";
import { useRouter } from 'next/router'

const Cart = ({ isOpen, onClose, children, onSubmit, total }) => {
  return (
    <div
      className={`fixed top-0 right-0 h-full bg-slate-900 bg-opacity-95 text-white w-full sm:w-96 transform transition-transform duration-300 ${
        isOpen ? 'translate-x-0' : 'translate-x-full'
      }`}
    >
      <button
        className="absolute top-2 right-8 text-4xl text-white hover:text-gray-400"
        onClick={onClose}
      >
        &times;
      </button>
      <h2 className="px-6 py-4 pb-0 text-2xl font-bold mb-4">Suas Magias ({total})</h2>
      <div className="p-4 pt-0 overflow-y-auto h-[calc(100%-150px)]">
        {children}
      </div>
      <div className='text-center mx-4 fixed bottom-5 w-[calc(100%-35px)] sm:w-[350px]'>
        <button
          onClick={onSubmit}
          className='text-lg block w-full text-black bg-emerald-200 px-2 py-1 rounded-xl'
        >
          Criar cart√£o de poderes
        </button>
      </div>
    </div>
  );
};

export default function Index() {
  const title = 'Poderes'
  const [spells, setSpells] = useState([])
  const [currentPage, setCurrentPage] = useState(1)
  const [totalPages, setTotalPages] = useState(1)
  const [cartSpells, setCartSpells] = useState(null)
  const [selectedSpell, setSelectedSpell] = useState(null)
  const [cartOpen, setCartOpen] = useState(false)

  const router = useRouter()

  useEffect(() => {
    if(selectedSpell || cartOpen) {
      console.log("Add class")
      document.body.classList.add('no-scroll');
    }

    if (!selectedSpell && !cartOpen) {
      console.log("Remove class")
      document.body.classList.remove('no-scroll');
    }

  }, [selectedSpell, cartOpen])

  useEffect(() => {
    async function loadSpells(page) {
      const result = await fetch(`http://localhost:5000/api/spells?page=${page}`)
      const response = await result.json()
      setSpells(response)
      setTotalPages(response.totalPages)

      console.log(result.headers)
      const totalPages = result.headers.get('X-Pages') || ''
      setTotalPages(parseInt(totalPages, 10))
    }

    loadSpells(currentPage)
  }, [currentPage])

  const handlePrevPage = () => {
    if (currentPage > 1) {
      setCurrentPage(currentPage - 1)
    }
  }

  const handleNextPage = () => {
    if (currentPage < totalPages) {
      setCurrentPage(currentPage + 1)
    }
  }

  const submitSpells = () => {
    const baseUrl = '/spells/print';
    const ids = cartSpells.map(spell => spell.id); // Example array of IDs
    const queryParams = new URLSearchParams();
    ids.forEach(id => queryParams.append('q[id_in][]', id));
    const url = `${baseUrl}?${queryParams.toString()}`;
    window.open(url);
  }

  return (
    <div>
      <Head>
        <title>{title}</title>
        <meta name="description" content="Generated by create next app" />
      </Head>
      <div>
        {cartSpells && (
          <Cart onSubmit={submitSpells} isOpen={cartOpen} onClose={e => setCartOpen(false)} total={cartSpells.length}>
            {cartSpells.map(spell => {
              const Icon = Icons[spell.icon]

              return (
                <button
                  onClick={e => setSelectedSpell(spell)}
                  key={spell.id}
                  className={classNames('w-full p-4 text-left my-2 rounded-md border', {
                    'bg-gradient-to-r from-purple-700 to-green-700': spell.ultimate,
                    'bg-gradient-to-r from-yellow-600 to-red-900': spell.sacrifice,
                    'bg-black-200 text-white border-gray-400 border': !spell.ultimate && !spell.sacrifice
                  })}
                >
                  <span className='inline-block mr-2 text-5xl align-middle'>
                    <Icon />
                  </span>
                  {spell.title}
                </button>
              )
            })}
          </Cart>
        )}
      </div>
      <div className="mx-3 md:mx-6 mt-4">
        <h1 className="text-4xl font-bold font-serif pt-10 px-4 flex justify-between gap-3">
          <span>
            {title}
          </span>
          {!cartSpells && (
            <button
              onClick={e => setCartSpells([])}
              className='text-lg text-black bg-emerald-200 px-2 py-1 rounded-xl'
            >
              Novo deck de Poderes
            </button>
          )}
          {cartSpells && (
            <button
              className='text-3xl border border-black rounded-xl px-2 py-1 bg-green-200 text-black'
              onClick={e => setCartOpen(true)}
            >
              <TbCards className='inline-block' /> <span className='text-2xl'>({cartSpells.length})</span>
            </button>
          )}
        </h1>

        {selectedSpell && (
          <div className="fixed inset-0 flex xs:justify-center items-start xs:items-center bg-black bg-opacity-50 overflow-x-scroll">
            <div className="relative bg-slate-700 rounded-lg shadow-lg w-full xs:w-11/12 sm:w-11/12 md:w-[800px] lg:w-[800px] p-6">
              <button
                className="fixed xs:absolute right-3 top-0 text-white hover:text-gray-900 text-4xl"
                onClick={e => { setSelectedSpell(null)}}
              >
                &times;
              </button>
              <Spell spell={selectedSpell} />

              <button
                className='mt-4 text-lg text-black bg-emerald-200 px-2 py-1 rounded-xl'
                onClick={e => {
                  setCartSpells([...(cartSpells || []), selectedSpell])
                  setCartOpen(true)
                  setSelectedSpell(null)
                }}
              >
                Adicionar Magia ao Deck
              </button>
            </div>
          </div>
        )}

        <div className='grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 mt-5 text-sm px-4 gap-3 md:gap-3 rounded-lg'>
          {spells.map(spell => {
            const Icon = Icons[spell.icon]

            return (
              <button
                onClick={e => {
                  setSelectedSpell(spell)
                  setCartOpen(false)
                }}
                key={spell.id}
                className={classNames('rounded-md border p-2', {
                  'bg-gradient-to-r from-purple-700 to-green-700': spell.ultimate,
                  'bg-gradient-to-r from-yellow-600 to-red-900': spell.sacrifice,
                  'bg-black-200 text-white border-gray-400 border': !spell.ultimate && !spell.sacrifice
                })}
              >
                <span className='inline-block mr-2 text-lg align-middle'>
                  <Icon />
                </span>
                {spell.title}
              </button>
            )
          })}
        </div>

        <div className="flex justify-between mt-4 px-4">
          <button
            onClick={handlePrevPage}
            disabled={currentPage === 1}
            className="px-4 py-2 bg-slate-500 text-white rounded disabled:opacity-50"
          >
            Previous
          </button>
          <span>Page {currentPage} of {totalPages}</span>
          <button
            onClick={handleNextPage}
            disabled={currentPage === totalPages}
            className="px-4 py-2 bg-slate-500 text-white rounded disabled:opacity-50"
          >
            Next
          </button>
        </div>
      </div>
    </div>
  )
}
